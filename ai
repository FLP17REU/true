from pathlib import Path

# ‡πÇ‡∏Ñ‡πâ‡∏î React ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå
code = """import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import QRCode from "react-qr-code";

export default function NetSurveyApp() {
  const [step, setStep] = useState(1);
  const [category, setCategory] = useState([]);
  const [socialApp, setSocialApp] = useState("");
  const [entertainmentApp, setEntertainmentApp] = useState("");
  const [usageDetail, setUsageDetail] = useState({
    category: 0,
    social: 0,
    entertainment: 0,
  });
  const [hotspot, setHotspot] = useState("");
  const [result, setResult] = useState("");

  const toggleCategory = (value) => {
    setCategory((prev) =>
      prev.includes(value)
        ? prev.filter((item) => item !== value)
        : [...prev, value]
    );
  };

  const estimateResult = () => {
    const { category: catMin, social: socMin, entertainment: entMin } = usageDetail;
    let mbPerDay = catMin * 5 + socMin * 10 + entMin * 25;

    let multiplier = 1;
    if (hotspot === "‡∏ö‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á") multiplier = 1.5;
    else if (hotspot === "‡∏õ‡∏•‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á") multiplier = 1.2;

    const totalGB = ((mbPerDay * 30) / 1024) * multiplier;

    if (totalGB < 10) {
      setResult("‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à: Net 10GB/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)");
    } else if (totalGB < 30) {
      setResult("‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à: Net 30GB/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á)");
    } else {
      setResult("‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à: Net ‡πÑ‡∏°‡πà‡∏≠‡∏±‡πâ‡∏ô (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ä‡∏£‡πå‡∏Æ‡∏≠‡∏ï‡∏™‡∏õ‡∏≠‡∏ï)");
    }
  };

  const appUrl = "https://your-net-app-url.com";

  return (
    <div className="max-w-xl mx-auto p-4 space-y-4">
      <h1 className="text-xl font-bold text-center">üì∂ ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ô‡πá‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h1>

      <div className="flex justify-center">
        <Card>
          <CardContent className="flex flex-col items-center pt-4 space-y-2">
            <p className="text-sm">‡∏™‡πÅ‡∏Å‡∏ô QR ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠</p>
            <QRCode value={appUrl} size={128} />
          </CardContent>
        </Card>
      </div>

      {step === 1 && (
        <Card>
          <CardContent className="space-y-2 pt-4">
            <Label>‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà 1: ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ Application ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏´‡∏ô‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î? (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏Ç‡πâ‡∏≠)</Label>
            {['‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á', '‡∏™‡∏∑‡∏ö‡∏Ñ‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'].map((item) => (
              <div key={item} className="flex items-center space-x-2">
                <Checkbox checked={category.includes(item)} onCheckedChange={() => toggleCategory(item)} />
                <Label>{item}</Label>
              </div>
            ))}
            <Button className="w-full" onClick={() => setStep(2)}>‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</Button>
          </CardContent>
        </Card>
      )}

      {step === 2 && (
        <Card>
          <CardContent className="space-y-2 pt-4">
            <Label>‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà 2: ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ Application ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÑ‡∏´‡∏ô‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?</Label>
            <RadioGroup value={socialApp} onValueChange={setSocialApp}>
              {['Facebook', 'LINE', 'Instagram', 'X', 'Whatsapp', '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'].map((app) => (
                <div key={app} className="flex items-center space-x-2">
                  <RadioGroupItem value={app} id={app} />
                  <Label htmlFor={app}>{app}</Label>
                </div>
              ))}
            </RadioGroup>
            <Button className="w-full" onClick={() => setStep(3)}>‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</Button>
          </CardContent>
        </Card>
      )}

      {step === 3 && (
        <Card>
          <CardContent className="space-y-2 pt-4">
            <Label>‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà 3: ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ Application ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á‡πÑ‡∏´‡∏ô‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?</Label>
            <RadioGroup value={entertainmentApp} onValueChange={setEntertainmentApp}>
              {['YouTube', 'TikTok', 'Netflix', 'VIU', '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'].map((app) => (
                <div key={app} className="flex items-center space-x-2">
                  <RadioGroupItem value={app} id={app} />
                  <Label htmlFor={app}>{app}</Label>
                </div>
              ))}
            </RadioGroup>
            <Button className="w-full" onClick={() => setStep(4)}>‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</Button>
          </CardContent>
        </Card>
      )}

      {step === 4 && (
        <Card>
          <CardContent className="space-y-4 pt-4">
            <Label>‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà 4: ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ {category.join(", ")} ‡∏ö‡πà‡∏≠‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô/‡∏ß‡∏±‡∏ô (‡∏ô‡∏≤‡∏ó‡∏µ)</Label>
            <Input type="number" value={usageDetail.category} onChange={(e) => setUsageDetail({ ...usageDetail, category: Number(e.target.value) })} />
            <Label>‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ {socialApp} ‡∏ö‡πà‡∏≠‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô/‡∏ß‡∏±‡∏ô (‡∏ô‡∏≤‡∏ó‡∏µ)</Label>
            <Input type="number" value={usageDetail.social} onChange={(e) => setUsageDetail({ ...usageDetail, social: Number(e.target.value) })} />
            <Label>‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ {entertainmentApp} ‡∏ö‡πà‡∏≠‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô/‡∏ß‡∏±‡∏ô (‡∏ô‡∏≤‡∏ó‡∏µ)</Label>
            <Input type="number" value={usageDetail.entertainment} onChange={(e) => setUsageDetail({ ...usageDetail, entertainment: Number(e.target.value) })} />
            <Button className="w-full" onClick={() => setStep(5)}>‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</Button>
          </CardContent>
        </Card>
      )}

      {step === 5 && (
        <Card>
          <CardContent className="space-y-2 pt-4">
            <Label>‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà 5: ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Æ‡∏≠‡∏ï‡∏™‡∏õ‡∏≠‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏°‡∏≤‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?</Label>
            <RadioGroup value={hotspot} onValueChange={setHotspot}>
              {['‡∏ö‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á', '‡∏õ‡∏•‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á', '‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏¢'].map((opt) => (
                <div key={opt} className="flex items-center space-x-2">
                  <RadioGroupItem value={opt} id={opt} />
                  <Label htmlFor={opt}>{opt}</Label>
                </div>
              ))}
            </RadioGroup>
            <Button className="w-full" onClick={() => { estimateResult(); setStep(6); }}>‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•</Button>
          </CardContent>
        </Card>
      )}

      {step === 6 && (
        <Card>
          <CardContent className="text-center pt-4 space-y-4">
            <p className="text-lg font-semibold">‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà 6: {result}</p>
            <Button variant="outline" onClick={() => setStep(1)}>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà</Button>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
"""

# Save the code to a file
path = Path("/mnt/data/NetSurveyApp.jsx")
path.write_text(code, encoding="utf-8")
path.name
